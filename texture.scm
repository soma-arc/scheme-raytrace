(define-module texture
  (use srfi-27)
  (use vec :prefix v:)
  (use perlin)
  (export-all))

(select-module texture)

(define-inline (value tex u v p)
  ((vector-ref tex 0) u v p))

(define (constant-texture color)
  (vector (lambda (u v p)
            color)))

(define (checker-texture even-tex odd-tex)
  (vector (lambda (u v p)
            (let ((sines (* (sin (* 10 (v:x p)))
                            (sin (* 10 (v:y p)))
                            (sin (* 10 (v:z p))))))
              (if (< sines 0)
                  (value odd-tex u v p)
                  (value even-tex u v p))))))

(define (noise-texture sc)
  (vector (lambda (u v p)
            (v:scale (v:vec3 1 1 1)
                     (noise (v:scale p sc))))))

(define (marble-texture sc)
  (vector (lambda (u v p)
            (v:scale (v:vec3 1 1 1)
                     (* 0.5 (+ 1 (sin (+ (* sc (v:z p))
                                         (* 10 (turb p))))))))))

(define (image-texture data nx ny)
  (vector
   (lambda (u v p)
     (let* ((i (* u nx))
            (j (- (* (- 1 v) ny) 0.001))
            (i (if (< i 0) 0 i))
            (j (if (< j 0) 0 j))
            (i (if (> i (- nx 1)) (- nx 1) i))
            (j (if (> j (- ny 1)) (- ny 1) j)))
       (v:vec3 (/ (floor->exact (vector-ref data (+ (* 3 i) (* 3 nx j))))
                  255)
               (/ (floor->exact (vector-ref data (+ (* 3 i) (* 3 nx j) 1)))
                  255)
               (/ (floor->exact (vector-ref data (+ (* 3 i) (* 3 nx j) 2)))
                  255))))))
